"use strict";(self["webpackChunkquant_ux"]=self["webpackChunkquant_ux"]||[]).push([[39],{76070:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"ab-testing",name:"A/B Testing",title:"A/B Testing ",body:'\n            You can create A / B tests with the help of the Logic Flows. Simply place a\n            logic operator <span class="mdi mdi-rhombus-outline"> on the canvas and add a wire from the\n            source widget that should trigger the screen transition. Afterwards, select the logic\n            operator and tick the <strong>A/B Test</strong> checkbox. Now wire the target screens. During a\n            test, the operator will send the users randomly along one of the links.\n        ',video:{src:"/myvideo4.mp4"},paragraphs:[{id:"ab-testing.users",title:"How to run",body:"\n\n                    A / B tests are a great way to compare two designs. However, you must carefully think \n                    about how to design the test. If you test two completely different designs, \n                    the results will give you an idea of which design works better, but you might \n                    not understand why. This can be fine, but if you aim for a deeper understanding, \n                    you should keep most of the design stable and only change one aspect. \n                    For example, the type of a UI element or its color.\n\n                "},{id:"ab-testing.stats",title:"Statistic Significance",body:'\n\n                If you run A / B tests you should aim for a large number of tests, otherwise, \n                the differences in the KPIs might be statistically not significant. \n                For instance, a single user, that did not understand the design, might skew the KPIs quite a lot.\n\n\n               \n                <p class="MatcHelpCallout">\n                    Best test with more than 60 people in each variant.\n                </p>\n                    \n                '}]}]},33553:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"analytics.canvas",name:"Analytic Canvas",title:"Analytic Canvas",body:'\n            To open the analytic canvas select the "Heatmaps" tab on the prototype overview page. Now select one of\n            the heap maps or click the "Analytic Canvas" button in the right corner. In the toolbar of the analytic canvas,\n            you can select different kinds of tools to visualize user behavior.\n        ',paragraphs:[{id:"analytics.canvas.intro",title:"What are heatmaps",body:"\n                    Click heatmaps to visualize where the users have clicked. The more the users \n                    click on a certain area, the hotter (more reddish) the area gets. Thus, the \n                    elements in the area are likely important for the user.\n                "},{id:"analytics.canvas.click",title:"Click Heatmaps",body:"\n                    When you review Click Heatmaps, you should analyze them in the context of your\n                    use cases. Before you created the interface, you identified and \n                    prioritized user tasks and designed the interface accordingly. The primary \n                    elements should be easy to find and you expect them to be used a lot.\n                    <br>  </br>\n                    If the primary elements are hot your hypothesis was most likely right \n                    and the users behave as you expected. If the primary elements are cold, \n                    this usually indicates a problem. The users might not be able to \n                    find the elements or do not want to use the function.\n                    Unexpected hot areas indicate that the users behave differently than you thought. \n                    </br>  </br>\n                    There are five different types of click heatmaps supported:\n                    <ol>\n                        <li>\n                            <b>All Clicks</b> gives you a good understanding of\n                            busy areas of your design but also makes it easy to spot areas \n                            that did not catch the users' attention.\n                        </li>\n                        <li>\n                            <b>First Click</b> helps you to uncover which \n                            elements draw the most attention from the users and where they \n                            clicked right after a screen was loaded.\n                        </li>\n                        <li>\n                            <b>First three Clicks</b> extend the first clicks to three clicks. \n                            Elements that are not touched within three \n                            clicks, may be hard to discover for the user.\n                        </li>\n                        <li>\n                            <b>Missed Clicks</b> show clicks on not actionable elements, for instance\n                            when the users click on the screen background. This can indicate that the users made an\n                            error and could not understand the intended interaction.\n                        </li>\n                    </ol>\n\n                "},{id:"analytics.canvas.mouse",title:"Mouse Heatmaps",body:'\n                    Cursor heat maps work differently than click heat maps. The longer the cursor \n                    is over a certain screen area, the hotter it gets. Research shows some \n                    correlation between cursor movement and eye gaze. This means long hover \n                    times over a specific area can indicate strong user interest, but it can also mean \n                    that the user simply didn’t move the mouse. \n                   \n                     <p class="MatcHelpCallout">\n                        Often these heatmaps are the result of a “reading pattern”, which often takes \n                        an F shaped form. \n                    </p>\n                '},{id:"analytics.canvas.journey",title:"User Journey",body:"\n                    The user journey shows how the users have navigated over the prototype. By default, \n                    the different journeys are merged and common paths are shown in a warmer color. \n                    You can deselect the merge option in the properties panel to show the individual \n                    flows. \n                    <br>\n                    In the properties section, you can also see the list of all user tests. \n                    You can toggle the visibility and also launch the screen recordings.         \n                "},{id:"analytics.canvas.scroll-visibility",title:"Scroll Visibility",body:"\n                    The scroll visibility shows for each screen which parts of the screen were shown to the users. \n                    This is important if you have longer screens. Parts below the fold (the bottom of the screen) \n                    are usually less often seen and are therefore shown in colder colors. \n                    The scroll visibility helps you to detect if the users explored the entire screen.          \n                "},{id:"analytics.canvas.scroll-time",title:"Scroll Time",body:"\n                    The scroll time shows on which parts of the screen the users have spent \n                    most of their time. The more time the users spend on a given \n                    section, the warmer the color gets.          \n                "},{id:"analytics.canvas.views",title:"Screen Views",body:"\n                    The view heatmap shows how many times a screen was seen by the users in \n                    relation to the other screens. Cold colors indicate that the majority \n                    of users have not seen the screen, which could be an indicator that the navigation is broken.        \n                "},{id:"analytics.canvas.dwell",title:"Dwell Time",body:"\n                    The dwell time indicates how much time the users have spent on a screen. \n                    If you have for instance a screen where the users have to fill out a form, \n                    the screen is usually hot.           \n                "},{id:"analytics.canvas.kpis",title:"Element KPIs",css:"",body:"\n                    When you select a widget or screen you can also see certain KPIs \n                    that are related to the widget. These KPIs include:            \n                "},{id:"analytics.canvas.kpi.clicks",title:"Widget Clicks",body:'\n                    The widget clicks tell you how many times a certain widget was clicked. \n                    This KPI relates directly to the heat maps. The gauge shows the absolute \n                    number of clicks, and the position of the ring shows the relation to all \n                    other widgets in the prototype.\n                    <p class="MatcHelpExample">\n                        <b>Example</b>: During the test 100 clicks were recorded by 5 users. \n                        Widget A was clicked 20 times. The relative frequency is therefore 20%.\n                    </p>\n                    \n                '},{id:"analytics.canvas.kpi.first-clicks",title:"First Clicks",body:'\n                    The Widget First Clicks tells you how many times a certain widget <strong>was clicked directly \n                    after a screen was loaded</strong>. The first clicks show which elements catch the most \n                    attention of the users. The gauge shows the absolute number, and the position \n                    visualizes the relation to the screen loads.\n\n                    <p class="MatcHelpExample">\n                        <b>Example</b>: A screen has two elements, A and B. The screen was loaded 10 times \n                        and 4 times element B was clicked immediately afterwards. \n                        The relative frequency is thus 40%.\n                    </p>\n                                    \n                '},{id:"analytics.canvas.kpi.before-click",title:"Time before Click",body:'\n                    The time before click tells you how many seconds the users took in average \n                    until they interacted the first time with the given element. In general, elements \n                    at the top should have shorter times than the elements at the bottom of a screen.\n                 \n                    <p class="MatcHelpExample">\n                        <b>Example</b>: A screen is loaded and after 10s the user interacts with element A. \n                        In a second test, the user only clicked on the element after 2s. \n                        The average time before the click is therefore 15s.\n                    </p>\n                '},{id:"analytics.canvas.kpi.coverage",title:"Test Coverage",body:'\n                    The test coverage tells you how many times a screen was tested. \n                    This metric indicates how easy the screen is to find. The gauge \n                    shows the absolute number of screen tests in the middle. \n                    The position of the ring indicates the relative test ratio.\n                    <p class="MatcHelpExample">\n                        <b>Example</b>: Your prototype has two screens and was tested by two users. \n                        The first user saw both screens, whereas the second user saw only the \n                        first screen. This means there are two tests. The relative frequency \n                        of the first screen is 100% because it was tested by every user, \n                        whereas the relative frequency of the second screen is 50%.\n                    </p>\n                    \n                '},{id:"analytics.canvas.kpi.dwell",title:"Dwell Time",body:'\n                    The average dwell time tells you how much time the users have spent, on average, \n                    on a screen. A high number might indicate that the users had to perform a lot of \n                    interactions, e.g. fill out a form. However, it can also indicate that the \n                    users had some problems, for instance finding the right elements.\n                    The gauge shows the absolute dwell time and also puts it in relation to the total test duration.\n                    \n             \n                    <p class="MatcHelpExample">\n                        <b>Example</b>: Five tests were done, each taking exactly 60 seconds. \n                        The users spend 20, 30, 30, 30 and 40 seconds on the first screen. \n                        The average dwell time is 30 seconds, and the relative dwell \n                        time 50% ((20 + 30 + 30 +30 + 40) / (5*60)).\n                    </p>\n                '},{id:"analytics.canvas.kpi.screen-views",title:"Screen views",body:'\n                    The screen views tell you how many times a screen was shown. If this number is \n                    much higher than the "Test Views", this indicates that the users often came  \n                    back to this screen. The gauge shows the absolute number in the middle. \n                    The position of the ring indicates the relative frequency.\n                    <p class="MatcHelpExample">\n                        <b>Example</b>: Your prototype has two screens and was tested by two users. \n                        The first user saw both screens, whereas the second user saw only the \n                        first screen. This means there were three screen loads. The relative \n                        frequency of the first screen is thus 67% and of the second 33%.\n                    </p>\n                \n                '},{id:"analytics.canvas.kpi.screen-clicks",title:"Screen Background Clicks",body:'\n                    The background clicks tell you how many times the users have clicked on the screen, \n                    and not on a widget. A high number indicates often problems, for instance, that the \n                    users expect certain elements to be clickable. The gauge shows the absolute number, \n                    and the position indicates the relative frequency with respect to all clicks on the screen.\n                    <p class="MatcHelpExample">\n                        <b>Example</b>: During the test, 100 events were recorded by three users on a given screen A. \n                        10 events were on screen A. The relative frequency is therefore 10%.\n                    </p>\n                '},{id:"analytics.canvas.kpi.screen-widget-clicks",title:"Screen Widget Clicks",body:'\n                    The widget clicks tell you how many times the users have clicked on elements. \n                    The number indicates how much "work" the users have performed on a certain screen. \n                    The gauge shows the absolute number, and the position indicates the relative \n                    frequency with respect to all clicks on the screen.\n                    <p class="MatcHelpExample">\n                        <b>Example</b>:  During the test, 100 events were recorded by three users on screen A. \n                        90 events were on the five widgets of the screen. The relative frequency is therefore 90%.\n                    </p>\n                '}]}]},10398:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"analytics",name:"Analytic Dashboard",title:"Analytics",css:"MatcHelpTopicSpacer",body:'\n            Bawdicsoft provides a rich selection of analytic tools and KPIs that help you understand how your users have interacted\n            with your prototype. The "<strong>Dashboard</strong>" tab shows the most important KPIs about the tests. In addition, you can \n            define analytic tasks to better understand the user behavior. The "<strong>Heatmap</strong>" tab shows the click heat maps \n            for each screen and allows you to launch the <strong>Analytic Canvas</strong> which gives you access to the most fine grained\n            information.\n            <br>\n            Before you can use the analytic tools you have to run a couple of tests.\n        ',paragraphs:[{id:"analytics.dash.users",title:"Users",body:'\n                        The question of how many users should participate in trials is heavily discussed in the scientific \n                        community. The bare minimum is <strong>5 users</strong>, which allows you to get some qualitative insights into \n                        user behaviour. You should be able to spot if the users understand the design or if they do errors. \n                        The best tool is in such a case the video recordings, which allow you to review each testing session. \n                        <br>\n                        5 users, however, do not yield statically relevant results and thus the heatmaps and other KPIs are \n                        very biased. This means, that if you test with more users the results might change significantly. \n                        This bias will get smaller with every user that tests the prototype and after roughly <strong>40 testers</strong>, \n                        you can expect the results to stabilize.  \n                        <br>\n                        If you want to run A / B tests you should aim for more than 60 \n                        testers in each variant. Otherwise, the differences that you observe in certain KPIs, e.g. \n                        the duration, might still be biased. Also, be aware, the outliers might strongly \n                        influence the results in small tests.\n                        <p class="MatcHelpCallout">\n                            In conclusion, you should try to test with as many users as possible. \n                            If you have access to only a small user group, be careful when you report the \n                            results to your stakeholders. \n                            <br>\n                            It is always correct to say that 4 of 5 users clicked \n                            on a given button, but concluding that 80% of all users will click on the button is likely to be wrong.\n                        </p>\n                        \n                    '},{id:"analytics.dash.coverage",title:"Test Coverage",body:'\n                        The test coverage is calculated as the fraction of screens that have been seen by the testers. \n                        The test coverage gives you a quick hint if your testers understood your prototype.\n                        <p class="MatcHelpExample">\n                            <b>Example</b>: If your prototype has 3 screens, and all users have only \n                            managed to see 2 of them, the test coverage is 66%\n                        </p>\n                        '},{id:"analytics.dash.duration",title:"Duration",body:'\n                        The test duration tells you how long the users tried out your prototype. \n                        It is calculated as the average duration of a test, starting from the first \n                        event until the last interaction. The standard derivation is also shown \n                        and gives you a hint of how similarly the users tested the prototype.\n                        <p class="MatcHelpExample">\n                            <b>Example</b>: Three users have tested your prototype. The first user took 30s, \n                            the second 40s and the third 50s. The average duration is \n                            then 40s and the standard derivation is 10s.\n                        </p>\n                    '}]}]},51482:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"analytics.tasks",name:"Analytic Tasks",title:"Analytics Tasks",body:"\n            Tasks are defined as a sequence of interactions that the users have to perform.\n            Analytic tasks allow you to measure how long and how many clicks users need for the execution.\n            <br>\n        ",video:{src:"/myvideo9.mp4"},paragraphs:[{id:"analytics.tasks.kpi",title:"Task KPIs",css:"",body:'\n                        Once the task flow is defined the task list will update and show several KPIs. These KPIs\n                        allow you to get a first understanding of whether the testers\' behavior is inline with your expectations.\n\n                        <p class="MatcHelpExample">\n                            <b>Example</b>: You have created a new design for a shopping app, and you \n                            are interested in how the design works. You run some tests and see that\n                            the users took an average of 2:30min. This is much more than expected, so you should\n                            do a deep dive and check out the detailed statistics to find if there are only some\n                            users that have issues and skew the KPIs, or if there is a general problem.\n                        </p>\n\n                    '},{id:"analytics.tasks.start",title:"Start",body:'\n                        The start rate tells you how many users were able to start a given task. \n                        <p class="MatcHelpExample">\n                            <b>Example</b>: Let\'s assume you have a prototype with three screens. A, B and C. A is wired to B, \n                            and B is wired to C. Also, you have defined a task, that measures if users go from B to C. \n                            If a tester views only screen A, this test session is not counted as started. If the \n                            tester visits A and B, the session is counted as started. \n                        </p>\n                        A low start rate indicates that the users have issues navigating in your design. They were not able \n                        to navigate to the right screen. \n                    '},{id:"analytics.tasks.success",title:"Success",body:'\n                        The success rate tells you how many users were able to \n                        complete a given task once they have <b>started</b>.\n\n                        <div class="MatcHelpExample">\n                            <b>Example</b>: We continue with the example outlined above. Let\'s assume \n                            we have three testers. Tester X visits only\n                            A, tester Y visits A and B, and tester Z visits A, B and C. In this case, the \n                            start rate would be 2 / 3, because testers Y and Z managed \n                            to visit screen B. The total number of successes is however only 1 since\n                            only tester Z managed to visit screen C. The success rate is thus 1 / 2.\n                        </div>\n\n                        In general, you want all users to understand your design and be able to complete\n                        the tasks. Hence, the higher the success rate, the better your design.\n                    '},{id:"analytics.tasks.duration",title:"Duration",body:'\n                        The task duration measures the average / mean time the users take to complete a task.\n                        Most of the time short durations indicate that the users understood your design.\n                        \n                        <div class="MatcHelpExample">\n                            <b>Example</b>: We continue with the example outlined above. Let\'s assume \n                            we have 4 testers that have completed the task. They took 10s, 12s, 10s\n                            and 28s. In this case, the mean duration would \n                            be (10 + 12 + 10 + 28) = 60s divided by 4, so 15s.\n                        </div>\n\n                        Please be aware that often duration times <b>vary</b> a lot between individual users. As you\n                        could see in the example the first three users were quite fast, whereas the last user\n                        was slow.\n                        <br>\n                        It would, in such a case, make sense to review the screen recordings or check the\n                        user journey graphs to understand the user\'s problems. \n\n                        <p class="MatcHelpCallout">\n                           One can click on the <span class="MatcButton mdi mdi-chart-bar"></span> to open a detailed \n                           view of the distribution of the durations in the scatter plot.\n                        </p>\n                        \n                       \n                        '},{id:"analytics.tasks.clicks",title:"Interactions",body:'\n                        The task interaction measures the average / mean number of interactions\n                        the user needs to complete a task.\n\n                        <div class="MatcHelpExample">\n                            <b>Example</b>: We continue with the example outlined above. Let\'s assume \n                            we have 2 testers that have completed the task. They took 5\n                            and 15 clicks. In this case, the mean interaction would \n                            be (5 + 15) = 20 divided by 2, so 10 clicks.\n                        </div>\n\n                        Like the duration, the number of interactions may vary a lot between\n                        the individual users. The mean value might hide such case outliers,\n                        that are interesting for further analysis.\n\n                        <p class="MatcHelpCallout">\n                            One can click on the <span class="MatcButton mdi mdi-chart-bar"></span> to review\n                            the distribution of the interactions and spot outliers.\n                        </p>\n                    '},{id:"analytic.taks.dialog",title:"Task Charts",body:'\n                        You can get a deeper insight into the distribution of the duration and interactions by\n                        clicking on the <span class="MatcButton mdi mdi-chart-bar"></span> button. \n                        In the dialog, you can switch between scatter plots and box plots.\n                        <br><br>\n                        <b>Scatter plots</b> show the duration of a task vs the number of interactions and\n                        make it easy to spot outliers, for instance, a user that took an unusual amount\n                        of time and clicks. \n\n                        <p class="MatcHelpCallout">\n                            Clicking on a dot in the scatter plot will open the screen recording, so you\n                            can easily understand where the testers struggled.\n                        </p>\n\n                        <b>Box plots</b> show also the duration and interaction but in a condensed way. \n                        They visualize the distribution and skewness of the data, by showing\n                        the average and 75% quartiles.\n\n                      \n                    '}]}]},66026:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"analytics.dist",name:"Data Distribution",title:"Data Distribution",body:"\n\n        The data distribution gives you an overview of how much time the users spend in the prototype \n        and how many clicks they took. \n      \n          \n\n        ",paragraphs:[{id:"analytics.dist.scatter",title:"",body:"\n                   \n                    The data distribution gives you an overview of how much time the users spend \n                    on the prototype and how many clicks they took.\n                    The data is shown as a scatter plot. Each user is presented as a circle in the diagram. \n                    The x-axis represents the time the users spend (duration), and \n                    the y-axis the number of clicks (interactions).\n                 \n                ",image:{src:"/help/DataDistScatter.png",caption:"Clicking on the circle allows to review the screen recording."}},{id:"analytics.dist.scatter.why",title:"",body:'\n                                          \n                    \n                        <p>\n                            The scatter plot gives an instant overview of how the data is distributed. \n                            Often, most testers will use a similar amount of clicks and time. \n                            This will lead to a dense plot area where many of the circles are close \n                            together, which can be easily spotted. If this area is at a different place \n                            than you expected, the design might have some issues, or the task \n                            descriptions need to be more precise.                         \n                        </p>\n                        <br>\n                      \n                           \n                        <p class="MatcHelpCallout">\n                            By clicking on a circle, one can\n                            open the session replay. Just click on the link that will appear below the chart.\n                        </p> \n                        \n                '},{id:"analytics.dist.scatter.outlier",title:"Outliers",body:"\n                    <p>\n                        In statistics, outliers are data points very different from most of the data. \n                        Nevertheless, often it is interesting to investigate these data points because they reveal important insights.\n                    </p>\n                    <br>\n                    <p>                    \n                        In the scatter plot, outliers are marked red. These points present users have behaved \n                        differently than the majority of the users. For instance, they take more time, \n                        finish different tasks, or navigate unexpectedly. For the analysis, Bawdicsoft uses \n                        not only the interactions and the duration as inputs but also the following variables:\n\n\n                        <ol>\n                            <li>\n                                <b>Duration</b>: The total time the user has spent on the test. \n                                A very high or low number might indicate that the user had issues.\n                            </li>\n                            <li>\n                                <b>Interactions:</b>  The number of clicks and other interactions that the user has done.\n                            </li>\n                            <li>\n                                <b>Unique Screens:</b> The number of individual screens a user has seen. This metric \n                                quantifies if the user was able to navigate through the design.\n                            </li>\n                            <li>\n                                <b>Total Screens:</b> The total number of screens a user has visited. This number might \n                                differ from the number of visited screens, for instance, if users go back and forth \n                                between two screens. A significant difference might be a sign that the user had \n                                problems with the navigation.\n                            </li>\n                            <li>\n                                <b>Navigation Anomaly:</b> This metric measures how different a user's navigation patterns \n                                are compared to those of other users. For instance, if all users click 'button 1', 'button 2' \n                                and 'button 3' expect of one user that clicked 'button 3', 'button 2' and 'button 1', that \n                                last user would have a very high score (100) in this metric.\n                            </li>\n                            <li>\n                                <b>Task Success:</b> The number of tasks the user could complete.\n                            </li>\n                        </ol>\n\n\n\n                    <p>\n                    <br>\n                    <p class=\"MatcHelpCallout\">                 \n                        Hovering over the points will open a tooltip with additional information to help understand why the user \n                        was an outlier. For a deeper analysis, click on the point and open the screen recording for an in-depth review.\n                    <p>\n          \n                "}]}]},52302:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"animations",name:"Animations",title:"Animations",body:"\n            Bawdicsoft supports two kinds of animations. Widget animations change the style of a widget, depending on \n            user interactions. For instance, you can define a hover color for a button or an error color for a text box.\n            In addition, you can also create screen animations, that are shown once a screen is loaded. These include entrance\n            animations, such as slide in effects, and more complex animations that are defined for every widget.\n\n            \n        ",video:{src:"/myvideo.mp4"},paragraphs:[{id:"animations.widget",title:"Widget Animations",body:"\n                    To add an animation to a widget, select a widget, and if the widget supports animations you can see in the \n                    lower right corner a tab bar with the different widget states, e.g. <strong>Normal</strong>\n                    and <strong>Hover</strong>. Note that this is only visible in Design view.\n                    \n                    <br> <br> \n                    If you press Hover, the properties panel will change and only show the properties \n                    that you can change for the hover state. Change the background, or text color. When you \n                    launch the simulator the selected color will be shown when \n                    you hover with the mouse over the widget. \n                "},{id:"animations.screens",title:"Screen Animations",body:'\n                    Before you create a screen animation, you have to create a link between a source (widget or screen) \n                    and a target screen. Once you have created the link, select the source element. In the properties panel,\n                    you can now select in the <strong>Action</strong> section \n                    the <strong><span class="mdi mdi-close"/> No Animation</strong> button. A popup will show up,\n                    that lets you define how the new screen is animated, for instance, if it is faded or slid in. \n                    You can also configure the duration and the easing function.\n                    <br>  <br>\n                    You can also create dedicated loading animations that will animate each widget separately. \n                    Select a screen, and press the <strong><span class="mdi mdi-video" /> Animation</strong> button. \n                    The animation composer will show up, which lets you define for each widget an animation \n                    timeline. You can set the start and end of the animation. Press the\n                    <span class="mdi mdi-close"/> icon to select the type of animation.\n\n                    <p class="MatcHelpCallout">\n                        Please note that the <strong><span class="mdi mdi-auto-fix"/> Transform</strong> animation type \n                        works only if the first screen has an element with the <strong>same name</strong>. \n                        The animation will transform the previous widget (position and style) to the current one.\n                    </p>\n                '},{id:"animations.transforms",title:"Screen Transforms",body:'\n                    If you want more advanced animations you can use the <strong>Animation</strong> links. These \n                    special kinds of links create under the hoods for every widget a transform animation\n                    that is shown when the screen is loaded. The best way to work with animation links is to:\n                    <ol>\n                        <li>\n                            Create a screen with all elements in the initial state.\n                        </li>\n                        <li>\n                            Create a copy of the screen.\n                        </li>\n                        <li>\n                            Change the elements in the copy to define the end state of the animation.\n                        </li>\n                        <li>\n                            Select the element which should trigger the animation and click on \n                            <span class="MatcButton">Add Action</span> button and select <strong>Animation</strong>\n                        </li>\n                    </ol>\n                '}]}]},60459:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"bugs",name:"Chrome Bugs",title:"Chrome Bugs",body:'\n          Some versions of the Chrome browser set the minimum font size to 6px. This causes issues when zooming the prototypes. To fix\n          this issue, you can change the settings as follows:\n          <br>\n            <ol>\n            <li>\n                Open the Preferences (Chrome Menu > Settings)\n            </li>\n            <li>\n                Search for "Customize fonts"\n            </li>\n            <li>\n                Open the settings page\n            </li>\n            <li>\n                Set the "minimum font size" slider to 0\n            </li>\n        </ol>\n      ',paragraphs:[]}]},82083:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"components",name:"Components",title:"Components",css:"",body:"\n          Components encapsulate common styles, e.g. buttons, links and input elements. Once you have created\n          the archetypes of your design system, you can turn them into components and reuse them at different\n          places in the prototype. The big benefit, over simply copy-pasting the elements, is that changes in a\n          component will automatically update all instances of that component.\n      ",paragraphs:[{id:"components.create",title:"Create a component",body:"\n             To create a component follow these steps:\n\n             <ol>\n                <li>\n                   Create a UI element and style it as you like. You can also group several elements.\n                </li>\n                <li>\n                    Select the element. In the toolbar on top, click on 'Create Component'.\n                </li>\n                <li>\n                    Enter the name of the component in the dialog.\n                </li>\n                <li>\n                    Click <span class=\"MatcButton\">Create</span>\n                </li>\n              </ol>\n          "},{id:"components.use",title:"Reuse a component",body:"\n             To reuse a component follow these steps:\n\n             <ol>\n                  <li>\n                  Press <strong>W</strong> or select the <span class=\"mdi mdi-puzzle-outline\"/> icon. The widget\n                  menu will open\n                </li>\n                <li>\n                    Select the 'My Components' section.\n                </li>\n                <li>\n                    Click on the component you would like to add.\n                </li>\n              </ol>\n          "},{id:"components.update",title:"Update a component",body:"\n             At some point in time, you might want to update a component.\n\n             <ol>\n                <li>\n                    Select an instance of a component.\n                </li>\n                <li>\n                    Perform the changes.\n                </li>\n                <li>\n                    Click on 'Update Component' in the top toolbar.\n                </li>\n              </ol>\n          "}]}]},59731:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"Contact",name:"Contact",title:"Contact",body:'\n        <p class="MatcMarginBottom">\n            We are always looking for feedback and ideas for improvements.\n            </p>\n        ',hasContact:!0}]},30455:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"databinding",name:"Data Binding",title:"Data Binding",body:"\n            Sometimes you want to carry over user data from one screen to another. For these kinds of scenarios,\n            you can use the data binding functionality. You can also use data binding in the Logic Operators.\n        ",video:{src:"/myvideo2.mp4"},paragraphs:[{id:"databinding.intro",title:"How it works",body:'\n                    In Bawdicsoft there is hidden data which allows you to store and read data, while\n                    the prototype is tested. You can think of the data as a simple JSON object\n                    with different properties.\n\n                    <br><br>\n                    Imagine you build a form for the users to sign up for a service. They need\n                    to enter their email, name, last name and address. The data might look \n                    like this:\n\n                    <div class="MatcHelpExample">\n             \n                        <pre>\n{\n    "email": "PedroHauten@gmail.com"\n    "name": "Pedro",\n    "lastname": "Hauten",\n    "address": {\n        "street": "Cavar de Castelo",\n        "zip": "34414-100",\n        "city": "Warburgo",\n        "country":"Portugal"\n    }\n}\n                        </pre>\n                    </div>\n\n                    Data Binding allows you to link this data to the UI elements, e.g. a text input element.\n                    If you want to link for example a text box to the email of the user, the correct variable name would\n                    be "email". If you want to link to the street, the name would be "address.street". \n                    <br>\n                    Once the user has entered data, the information is stored. You can use it in the following\n                    screens, e.g. to show it again, maybe as a label. You can also use the data for rule based navigation\n                    or send it with the <b>Web Service</b> to a real server.\n\n                    <br><br>\n\n                    To assign or edit the variable follow the steps below:\n\n                    <ol>\n                        <li>\n                            Select the element\n                        </li>\n                        <li>\n                            Click on <span class="MatcButton">Prototype</span> at the top\n                        </li>\n                        <li>\n                            In the data section click on "<b>Add Data Binding</b>"\n                        </li>\n                        <li>\n                            A dialog will open, that allows you to define the name of\n                            the variable you want to write to. You can also select\n                            an existing variable\n                        </li>\n                    </ol>\n\n                    \n\n                    <p class="MatcHelpCallout">\n                        Most UI elements have only one variable that is used for input and output.\n                        An example is a simple textbox, which reads or writes the text. Some elements have\n                        more variables, for example, a Dropdown element. It has an input and output as well as  \n                        a list of menu items. These could also be read from the data model or even a web service.\n                    </p>\n                '}]}]},52250:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"getting_started",name:"Getting Started",css:"MatcHelpTopicSpacer",title:"Getting Started",body:"\n            Bawdicsoft is a prototyping tool to design, test and analyse your visual designs.\n            To learn more, use the navigation on the right side.\n        ",paragraphs:[{id:"getting_started.into",title:"Overview",body:"\n                        A prototype consists out of the screens in which you can place widgets. Widgets are the basic building blocks\n                        of your design, but in contrast to most other prototyping tools, they are fully functional.\n                        This means users can toggle a checkbox or enter data into a text field.\n                        <br><br>\n\n                        Bawdicsoft canvas has three main views on a prototype.\n\n                        <ol>\n                            <li>\n                                The <b>Design</b> view allows you to create the visual aspect of your prototype. You can\n                                add screens and widgets and change the appearance.\n                            </li>\n                            <li>\n                                The <b>Prototype</b> view defines the interaction between the screens and elements. In the prototype\n                                view, you can see and create the links between the screens. You can also customize certain\n                                dynamic properties of input element, e.g. form validation and data binding.\n                            </li>\n                            <li>\n                                In the <b>Low Code</b> view, you can define properties that are important for turning the prototype\n                                into a working application.\n                            </li>\n                        </ol>\n\n                        <br>\n                        You can define screen transitions that link the screens together. A transition is triggered when the user\n                        performs a certain action, for instance, clicks on a button or performs a screen gesture.\n                    "},{id:"getting_started.screens",title:"Screens",body:'\n                        To create a screen, press <strong>S</strong> or click the <span class=" mdi mdi-cellphone"/> icon.\n                        You can place the screen freely on the canvas.<br>\n                        Once you have placed the screen, click on it to select it. On the right property panel, you can\n                        now configure the screen name, the background (color or image).\n                        <br>\n                        You can also set a screen to be an overlay. This means, that the screen will be rendered on top of\n                        another screens. This is for instance useful if you want to build modal dialogs.\n                    '},{id:"getting_started.widgets",title:"Widgets",body:'\n                        Bawdicsoft comes with a rich selection of functional widgets. You can create a widget by pressing\n                        <strong>W</strong> or selecting <span class="mdi mdi-puzzle-outline"/> icon. To create the most common widgets,\n                        you can also use the  <strong>R</strong> (Rectangle), <strong>T</strong>\n                        (Text) or  <strong>H</strong> (Hotspot)\n                        shortcuts.<br>\n                        To select a widget, simply click on it. The property panel will show up, and you can configure the visual\n                        appearance of the widget. In addition, you can configure certain properties, for instance the\n                        entries in a dropdown box.\n                    '},{id:"getting_started.links",title:"Links",body:'\n                        To create a screen transition, you have to link a source (widget or screen) to a target screen.\n                        Change to the <strong>Prototype</strong> view and select the widget (or screen) and press the <strong>L</strong> or click on the\n                        <span class="MatcButton">Add Action</span> button in the properties panel.\n                        Now you can select the target screen.\n                        <br>\n                        Once you have created a link the Add Action button will disappear in the properties panel, and you\n                        can configure certain properties of the link, for instance the animation and the user\n                        event that should trigger the screen transition. For screens, you can also create timed\n                        transitions to create splash screens.\n                        <br>\n                        <strong>Hint:</strong> To clean up the design, you can also place waypoints, by clicking on the canvas.\n                    '}]}]},33869:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"design_import",name:"Sharing a Design System",title:"Sharing a Design System",css:"",body:'\n          Often you want to create a design system, that can be used in multiple prototypes. To share a design system,\n          you can simply import the prototype which contains the design systems into other prototypes. The components\n          of the design system will be available in the widget menu.\n\n          <br>\n          To create a design system follow these steps:\n                  <ol>\n                      <li>\n                          Create a new prototype and build your design system in there. Define all elements you\n                          want to reuse.\n                      </li>\n                      <li>\n                          Create a second prototype.\n                      </li>\n                      <li>\n                         Press <strong>W</strong> or select the <span class="mdi mdi-puzzle-outline"/> icon. The widget\n                         menu will open\n                      </li>\n                      <li>\n                          Click on the <span class="MatcButton">Import</span> button. A list of prototypes will show up.\n                      </li>\n                      <li>\n                          Select the design system prototype and press <span class="MatcButton">Save</span>.\n                      </li>\n                      <li>\n                         A new category will show up on the right side. Select it.\n                      </li>\n                      <li>\n                         You can find here all the widgets you have defined on your design system.\n                      </li>\n                  </ol>\n      ',paragraphs:[]}]},47419:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"design_tokens",name:"Design Tokens",title:"Design Tokens",body:"\n          A design token is a global style, such as color, border or shadow. You can 'link' the tokens to your\n          widgets. Updates on the design tokens will be visible on all\n          widgets that are lined to the particular style.\n      ",paragraphs:[{id:"design_token.add",title:"Create a design token",body:"\n                  To create a design token follow these steps:\n                  <ol>\n                      <li>\n                          Create a widget and style it as you like. For instance, define a background color.\n                      </li>\n                      <li>\n                          Click the <span class=\"mdi mdi-dots-horizontal\"></span> icon and select 'Create Token'. Enter a\n                          name for the token in the dialog and press 'Create'.\n                      </li>\n                      <li>\n                         Now the view will change, and the name of the token will be shown.\n                      </li>\n                  </ol>\n\n              "},{id:"design_token.link",title:"Change or add a design token",body:'\n                To link an existing design token to a widget perform the following steps:\n                <ol>\n                    <li>\n                        Select a widget\n                    </li>\n                    <li>\n                        Click the <span class="mdi mdi-dots-horizontal"></span> icon and select the style you want to link. If the widget\n                        is already linked, the new style will be applied.\n                    </li>\n                    <li>\n                       Now the view will change, and the name of the token will be shown.\n                    </li>\n                </ol>\n\n            '},{id:"design_token.update",title:"Update a design token",body:'\n                To update a design token follow these steps:\n                <ol>\n                    <li>\n                        Select a canvas. The list of all design tokens will be shown.\n                    </li>\n                    <li>\n                        Hover over the token you want to change, and click on the <b><span class="mdi mdi-cogs"></span> </b> icon.\n                    </li>\n                    <li>\n                       Change the style or the name in the popup.\n                    </li>\n                    <li>\n                        Press <span class="MatcButton">Save</span>.\n                    </li>\n                    <li>\n                        All instances of the style will be updated.\n                    </li>\n                </ol>\n\n            '}]}]},33296:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"validation",name:"Form Validation",title:"Form Validation",body:"\n            Bawdicsoft supports form validation. You can specify for most of \n            the widgets if the user input is <strong>required</strong>. For text boxes, you \n            can even specify different input formats. You can, for instance, \n            define that a certain input field requires valid email addresses, \n            whereas another widget requires numbers larger than zero. Bawdicsoft ships \n            with a number of built in patterns, such as phone numbers, dates, times or \n            email addresses, but you can also specify custom patterns.\n        ",video:{src:"/myvideo5.mp4"},paragraphs:[{id:"validation.intro",title:"When to use",body:"\n                    When you are designing a complex workflow, data validation is mandatory to\n                    prevent users from entering the wrong data. Thus, validation is also \n                    crucial during prototyping, if you want to create a realistic prototype.\n                "},{id:"validation.enable",title:"Enable Validation",body:"\n                    To enable validation, select a widget and select the <strong>Required</strong> checkbox \n                    in the <strong>Data & Validation</strong> section of the property panel. You can also\n                    set for certain types of widgets the required input pattern. To change this, click on the\n                    <strong>No Validation</strong> button to select the type of pattern that is allowed.\n                "},{id:"validation.feedback",title:"User Feedback",body:"\n                    Of course, simply validating the input is not enough. In case the input is wrong, \n                    you want to give some feedback to the user. With Bawdicsoft you can do this in two ways. \n                    First, you can define a special <strong>error style</strong> of the error case, \n                    and customize the appearance of the widget in case the input is wrong. \n                    For instance, the border of the input field can turn red. Second, you can \n                    also specify a so called <strong>error label</strong>, which will be shown \n                    when the user input is wrong.\n\n                "},{id:"validation.links",title:"Block Navigation",body:"\n                    In most scenarios, you don’t want the user to progress in the workflow \n                    when the input is wrong. For example, the user should only be able \n                    to move on in the sign-up process, when he has entered a valid \n                    email address. Therefore, you can also <strong>enforce data validation on links</strong>. \n                    The linked screen will only be loaded when all fields \n                    in the current screen are valid. \n\n                "}]}]},23272:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"import",name:"Import",title:"Import",body:"\n           You can import images (png, jpg) or Figma projects into Bawdicsoft.\n        ",paragraphs:[{id:"import.bitmap",title:"Image Import",body:'\n                    You can import PNG and JPEG files from other tools into Bawdicsoft. Simply drag and drop them on the canvas,\n                    and the images will be uploaded as screens. If you drop the images within an existing screen, they will be\n                    added as images.\n                    <br>\n                    As an alternative, you can also select the <span class="mdi mdi-image"/> image icon when\n                    you have a screen or image widget selected to open the Upload dialog. Once the dialog is open, you can drag and drop\n                    your files in here, or select already uploaded files.\n                '},{id:"import.figma",title:"Figma Import",video:{src:"/myvideo1.mp4"},body:'\n                    You can import Figma projects into Bawdicsoft by opening the Import wizard. Before you start you need to create an Access key:\n\n                    <ol>\n                        <li>\n                            Login to your Figma account.\n                        </li>\n                        <li>\n                            Open the "Account Settings" in the top left menu\n                        </li>\n                        <li>\n                            Go to the "personal Access Tokens" section\n                        </li>\n                        <li>\n                            Click on "Create new token"\n                        </li>\n                        <li>\n                            Copy the generated token, and save it somewhere safe.\n                        </li>\n                    </ol>\n\n                    You need to create the token only once, it is valid for all projects in Figma.\n                    Once you have a token, perform the following steps:\n\n                    <ol>\n                        <li>\n                            Click the menu (<span class="mdi mdi-menu"/>) and select "Import"\n                        </li>\n                        <li>\n                            Select the "Figma" tab\n                        </li>\n                        <li>\n                            Enter your access key and copy the URL of the Figma project.\n                        </li>\n                        <li>\n                            Click on "Import"\n                        </li>\n                    </ol>\n                '}]}]},61990:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"logic",name:"Logic Flows",title:"Logic Flows",body:"\n            Logic Flows enable you to create conditional navigations that allow you to model real world\n            workflows in your prototypes.\n        ",video:{src:"/myvideo3.mp4"},paragraphs:[{id:"logic.intro",title:"When to use",body:"\n                    Sometimes, a prototype has to react to the user input. Imagine you are testing a checkout \n                    process, and the user must choose between several payment options, for instance, bank \n                    transfer and credit card. Depending on the selection, the next page should show \n                    the different information and input fields. \n                    <br>\n                    For these kinds of scenarios, Bawdicsoft supports <strong>Logic Flows</strong>. In addition \n                    to linking two pages, you can also add a logical operator \n                    to dynamically decide which screen to show next.\n                    <br>\n                "},{id:"logic.howto",title:"Create Logic Flows",body:'\n                    Click on the <span class="mdi mdi-rhombus-outline"> icon to place a Logic Operator on\n                    the canvas. Instead of creating a direct link from the button to the next page, \n                    <strong>you link the logic operator instead</strong>. \n                    Once you selected it, you can create multiple links to different pages, and add rules to each link. \n                    A rule simply states that a certain input field should be equal to a given value.\n                    When the user clicks on the button, the first link which matches the rule \n                    will be followed. If no rule is matched then the first link without any rule is followed.\n                '}]}]},46583:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"master",name:"Master Screens",title:"Master Screens",body:"\n            Integrating repeating elements such as navigation bars into a design system is tricky, as these elements \n            usually need a slight modification on each screen. To ease this task, \n            Bawdicsoft supports Master Screens.\n        ",video:{src:"/myvideo8.mp4"},paragraphs:[{id:"logic.intro",title:"When to use",body:"\n                    Prototypes often share the same design elements across multiple screens. Examples are for \n                    instance navigation bars or visual styles for text and buttons. The simplest way to \n                    share the elements is to copy them from one screen to another. This approach has \n                    a significant drawback. Once you want to change the style of the elements, you \n                    have to apply the changes on all screens.\n                "},{id:"logic.how",title:"How it works",body:"\n                    For such scenarios, we introduced Master Screens in Bawdicsoft.com. \n                    A master screen is a kind of symbol for screens that the different screens \n                    in your app can extend. Changes to the master screen are automatically \n                    updated in all screens. It’s basically like a master slide in PowerPoint, \n                    but we extended the concept to boost productivity further.\n                    <br>\n                    In Bawdicsoft you can extend (or overrule) the master screen for \n                    selected elements, for instance, to highlight the current position in the screen flow.\n                "},{id:"logic.setmaster",title:"Set a master screen",body:'\n                    First, you have to create a master screen. This contains for instance a navigation bar that should be shared\n                    with all other screens.\n                    <br>\n                    Once it is created, you can create a new screen and place it on the canvas. After selecting the screen,\n                    you can select the master screen in the "Master Screen" section \n                    by clicking on <strong>Add Master Screen</strong>. Now, all elements from \n                    the master screen are copied to the child screen.\n                '},{id:"logic.example",title:"Extend the master screen",body:'\n                    When you want to change the style of an element that is copied from a master screen, you have\n                    to explicitly enable editing. Select the element, and click <span class="MatcButton">Enable Editing</span>.\n                    In the properties panel on the right side, you have to enable editing. \n                    Once editing is enabled, you can change the font color to give a visual \n                    indication. \n                '}]}]},80767:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[]},67760:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"rest",name:"Web Services",title:"Web Services",body:"\n            With the new Web Service functionality you can load data from the internet to show in your\n            prototype. You can also use the web services to send user data from your prototype to a web service\n            and show the results.\n        ",video:{src:"/myvideo6.mp4"},paragraphs:[{id:"resyt.howto",title:"Create a web service",body:'\n                 To create a web service, you need to first drop the "Web Service" element onto the canvas. If\n                 you double click the element, or select it and click on the "Configuration" button in the properties\n                 panel, the configuration dialog will be opened. In here you can configure which URL to call, which\n                 HTTP method to use and which data to send.\n\n                 There are three ways how a web service can be called, this is configured via the "Trigger" element\n                 in the properties panel.\n    \n                 <ol>\n                    <li>\n                       First, you can link the element to a button. When the button is clicked, the web service is called.\n                    </li>\n                    <li>\n                        Second, the web service can be called, when the simulator is started. Select "Loaded Trigger". This\n                        option is useful, to load initial data.\n                    </li>\n                    <li>\n                        Third, you can also execute the web servicein an interval. Select "Repeat Trigger" \n                        and set the duration to the desired seconds. \n                    </li>\n                   \n                  </ol>\n\n                A web service element can be also linked to a screen, a script or a logic elements. Once the web service is \n                executed, the linked screen is shown, or the linked logic elements are executed.  \n\n              '}]}]},42551:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"segments",name:"Screen Segments",title:"Screen Segments",body:'\n            Screen Segments allow you to embed a screen in another screen, for instance, to allow\n            vertical or horizontal scrolling. To create a screen segment perform the following steps:\n            <br>\n                <ol>\n                    <li>\n                        Create a screen\n                    </li>\n                    <li>\n                        Press <strong>W</strong> to open the widget menu and select the <strong>Screen Segment</strong>\n                        widget. Place it on the screen.\n                    </li>\n                    <li>\n                        Create a second screen and select it.\n                    </li>\n                    <li>\n                        Select the <strong>Segment</strong> Checkbox. You can now resize the screen freely to match the\n                        dimensions of the Screen Segment widget. A larger size will result in a scroll behavior.\n                    </li>\n                    <li>\n                        Select the Screen Segment widget. In the properties section, click \n                        on the <strong>Select Screen Segment</strong> option. A dialog will show up, listing all the\n                        segment screens.\n                    </li>\n                    <li>\n                        Select the second screen and press save.\n                    </li>\n                </ol>\n            <br>\n\n            <p class="MatcHelpCallout">\n                Please note that the screen background will not be copied. \n                Set the background on the segment widget instead.\n            </p>\n\n            You can also bind a screen segment to a data variable, to enbale dynamic chaning of the content.\n            In this case, the screen segment will load the screen, where the name matches the \n            value in the variable. If the value is set to "Start", the start screen\n            will be loaded, if the value is "Welcome", the welcome screen will be loaded. \n            <br>\n           \n            \n        '}]},17331:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"scripts",name:"Scripts",title:"Scripts",body:'\n            Script components allow you to run small JavaScripts to make your prototypes even more interactive. You can for example\n            use them to set data binding values, load or send data to a server, or calculate dynamic values, like the sum\n            of two input fields.\n        \n            <p class="MatcHelpCallout">\n                Scripts are  currently in the beta phase. You need to enable them in the settings menu. Click on the menu ( <span class="mdi mdi-menu"/> ) ,\n                select "Settings" and tick the "Enable Beta Features" checkbox.\n            </p>\n            \n        ',video:{src:"/myvideo7.mp4"},paragraphs:[{id:"script.intro",title:"Introduction",body:'\n                    Select the <span class="mdi mdi-code-tags"/> icon in the right toolbar and drop the widget on the canvas. When you select the script\n                    widget, you can see in the right menu an "Edit Script" button. Clicking it will open the Script editor. The editor has on the right side,\n                    the simulator and on the left a simple JavaScript editor. You can enter your scripts there. Click on "Run" to execute and test the script.\n                    In the "Console" tab, you can see the output of the script.\n                ',image:{src:"/help/ScriptEditor.png"}},{id:"script.basics",title:"Basics",body:'\n                    The script has access to Bawdicsoft objects, the "data" binding and the "qux" object.\n                    \n                    <ol>\n                        <li> \n                            The <b>data</b> object allows you to read\n                            and write data through the data binding that is defined for the components in your prototype.\n                        </li>\n                        <li>\n                            The <b>qux</b> object allows you to change the styles for the \n                            components or to change the visibility.\n                        </li>\n                        <li>\n                            The <b>event</b> object shows from which widget the script was triggered.\n                        </li>\n                    </ol>\n\n                 \n\n                    Scripts can be executed on three different events.\n\n                    <ol>\n                        <li> \n                            If the user <b>clicks</b> on a component and the component is wired to a script. Use this \n                            to trigger the actions only on explicit user interactions.\n                        </li>\n                        <li>\n                            On <b>data-binding</b> changes. For instance, the user changes the value of a text field. Use\n                            this to update other components are set dynamic data-binding values.\n                        </li>\n                        <li>\n                            When the simulator is <b>loaded</b>. Use this to prefetch data, or set data.\n                        </li>\n                    </ol>\n\n               \n                    The script can also return a value. If the value matches the name if a \n                    screen, the simulator will load the corresponding screen. The following sections \n                    contain some sample scripts for common use cases.\n                    \n                '},{id:"script.setting",title:"Reading & Writing data",body:'\n                   To access data, you need to use the data-binding mechanism. Suppose you want to calculate the sum\n                   of two text fields. You need to \n                    \n                    <ol>\n                        <li> \n                           Create two text fields and a label to show the sum.\n                        </li>\n                        <li>\n                            Select the first text field and set the data binding to "valueA"\n                        </li>\n                        <li>\n                             Select the second text field and set the data binding to "valueB"\n                        </li>\n                        <li>\n                            Select the label and set the data binding to "sum"\n                        </li>\n                        <li>\n                            Add a script component to the canvas \n                        </li>\n                        <li>\n                            Add a button and wire it to the script. When the user clicks on the button the script is executed.\n                        </li>\n                    </ol>\n\n                    Your prototype could look like this:\n                \n                    \n                ',image:{src:"/help/ScriptDataBinding.png"}},{id:"script.setting2",title:"",body:'\n                   Now open the script editor and enter the following script. "\n\n                   <pre class="MatcHelpCode">data.sum = data.valueA * 1 + data.valueB * 1</pre>\n\n                   The script will\n                   read the user input from the first text field, which is saved in "data.valueA" and add\n                   the value of the second field ("data.valueB"). The result is written to  "data.sum" and thus shown\n                   in the label.\n                \n                   <p class="MatcHelpCallout">\n                        Text fields return string values. You need to cast them to numbers, e.g. by \n                        multiplying with 1.\n                    </p>\n\n                '},{id:"script.programmatic",title:"Programmatic Navigation",body:"\n                    To navigate after the execution of a script to a specific screen just return the name of the screen. You can\n                    also use it with the data binding to build conditional navigation. The following example will show \"Screen A\"\n                    if 'a' is entered into a text box, and otherwise \"Screen B\"\n                  \n                    <pre class=\"MatcHelpCode\">\nif (data.valueA === 'a') {\n    return 'Screen A'\n} else {\n    return 'Screen B\n}\n</pre>\n                "},{id:"script.auto1",title:"Automatic calculations",body:'\n                    You can also run the script automatically, every time the data has changed. Also, you \n                    want to initialize some values when the prototype is tested. Perform the following steps:\n\n\n                    <ol>\n                    <li> \n                       Create a "Grid" elements, which can repeat the child elements.\n                    </li>\n                    <li>\n                        Add a single text field to the grid.\n                    </li>\n                    <li>\n                       Create a label and set the text to "Sum: {0}". The {0} is a placeholder\n                       and will be later replaced.\n                    </li>\n                    <li>\n                        Bind the "Grid" to a "items" data-binding.\n                    </li>\n                    <li>\n                        Bind the text field to a "value" data-binding.\n                    </li>\n                    <li>\n                        Bind the label to a "sum" data-binding.\n                    </li>\n                    <li>\n                        Add two Script components. Rename the first to "Load" and the second to "Sum"\n                    </li>\n                </ol>\n\n                The prototype could look like this:\n\n\n                ',image:{src:"/help/ScriptAuto.png"}},{id:"script.auto2",title:"",body:'\n                   Select the "Load" script and enter the following value:\n\n                   <pre class="MatcHelpCode">\ndata.items = [\n    {value:1},\n    {value:2},\n    {value:3}\n]</pre>\n\n                To execute the script on load, change the trigger in the right properties panel to "Loaded Trigger".\n\n                Now the script is executed when the simulator is launched. It will set the "items" variable to the \n                list of objects. The "Grid" will now loop over the list and create a text field for each element in the list, \n                because it is bound to "items". The text fields\n                will be bound to the "value". So the first element is bound to "items[0].value", while the second\n                is bound to "items[1].value" and so on.\n                \n\n                '},{id:"script.auto3",title:"",body:'\n                   Select the "Sum" script and enter the following value:\n\n                   <pre class="MatcHelpCode">\nlet sum = 0\ndata.items.forEach(item => {\n    sum += item.value * 1\n})\ndata.sum = sum</pre>\n\n                To execute the script on any input change, select  the trigger "Data Trigger" in the properties.\n\n                When the user changes the value (and after the first load), the script will calculate the sum and set it to the "data" object.\n                \n\n                '},{id:"script.toggle1",title:"Toggle Visibility",body:'\n                    To toggle the visibility of an element you need to:\n\n\n                    <ol>\n                        <li> \n                            Create a screen called "ToggleScreen"\n                        </li>\n                        <li>\n                            Create a button\n                        </li>\n                        <li>\n                            Create an element to toggle, e.g. a rectangle. Call it "ToggleCntr"\n                        </li>\n                            Add a Script component and wire it to the button\n                        </li>\n                    </ol>\n                  \n                    the result could look like this.\n                ',image:{src:"/help/ScriptToggle.png"}},{id:"script.toggle2",title:"",body:"\n\n                Now edit the script and add the following code:\n\n                <pre class=\"MatcHelpCode\">\nlet toggleScreen = qux.getScreen('ToggleScreen')\nlet widget = toggleScreen.getWidget('ToggleCntr')\nwidget.toggle()                \n                </pre>\n\n                The script uses the qux API object. \n\n                <ol>\n                    <li> \n                       In the first line, it will get the screen by its name.\n                    </li>\n                    <li>\n                       In the second line, we get the \"ToggleCntr\"\n                    </li>\n                    <li>\n                       In the last line, we will toggle() its visibility.\n                </ol>\n\n\n                <p class=\"MatcHelpCallout\">\n                    You can also use the <b>hide()</b> and <b>show()</b> methods to \n                    set the visiblity depending on a value!\n                </p>\n\n                If you want to hide several elements, you need to group them and use the \n                <b>getGroup()</b> method.\n\n                <pre class=\"MatcHelpCode\">\nlet toggleScreen = qux.getScreen('ToggleScreen')\nlet group = toggleScreen.getGroup('ToggleGroup')\ngroup.toggle()           \n                </pre>\n                  \n                "},{id:"script.style",title:"Styles",body:"\n                    You can also set the style of an object. Let's assume we want to\n                    make an element red if the value is too low. The code would look like this:\n\n                    <pre class=\"MatcHelpCode\">\nlet screen = qux.getScreen('Screen')\nlet widget = screen.getWidget('Element')\nif (data.valueA * 1 < 100) {\n    widget.setStyle({color: 'red'})  \n} else {\n    widget.setStyle({color: 'black'})  \n}\n                 \n                    </pre>\n\n                    The script uses the <b>setStyle()</b> method to set a new style. You simply need to pass\n                    a JavaScript object of key-value pairs. The keys are the CSS property you want to change,\n                    the value is the corresponding CSS value. You can also pass several properties in one call. \n                    \n                    <p class=\"MatcHelpCallout\">\n                        Bawdicsoft follows the standard JavaScript way of set CSS styles. For instance, the \n                        \"border-top-color\" would have the key \"borderTopColor\"\n                    </p>\n\n                "},{id:"script.vibrate",title:"Haptic Feedback",body:'\n                    To give haptic feedback, use the <b>vibrate()</b> method. You can pass a number or an\n                    array of numbers to define the pattern. For more details see the \n                    <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate" target="_mozilla" class="MatcHelpLink">Mozilla</a>\n                    website.\n\n                    <pre class="MatcHelpCode">\nqux.vibrate(200)    \nqux.vibrate([100, 30, 100, 30, 100])                 \n                    </pre>\n\n                    \n                    <p class="MatcHelpCallout">\n                        Vibrations work only on mobile devices\n                    </p>\n\n                '}]}]},92910:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"support",name:"Support",title:"Support",css:"MatcHelpTopicSpacer",body:'\n            If you need help with Bawdicsoft, please use our channel at\n            <a class="MatcHelpLink" target="quxSpectrumChat" href="https://www.bawdicsoft.com/">Bawdicsoft.com</a>\n            or contact us directly.\n        '}]},60592:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"survey.intro",name:"User Surveys",title:"User Surveys",body:'\n          When users test a Bawdicsoft prototype, the user input is saved. For instance, a Star Rating that they are giving is stored.\n          You can use this mechanism to also collect qualitative feedback from the users.\n          <br>\n\n          <p class="MatcHelpCallout">\n             You can see the survey answers in the "Dashboard" section.\n          </p>\n          \n          Bawdicsoft comes with many elements that can be used to collect direct user feedback. In the widget menu in the design canvas,\n          you can find for instance Star Ratings or NPS feedback elements.\n \n\n      ',paragraphs:[{id:"survey.howto",title:"Create Survey",body:"\n             To create a survey in your prototype, simply use the normal input elements, such as Star Ratings or input boxes. You have to\n             create a data binding for every element that you want to be visible in the survey section. To create for\n             instance a Star Rating at the end of the test follow these steps:\n\n             <ol>\n                <li>\n                    Add a new screen to your prototype, and link it as the last screen in the flow.\n                </li>\n                <li>\n                    Add for instance a Star Rating element to the screen\n                </li>\n                <li>\n                    Select the new element\n                </li>\n                <li>\n                    Select the 'Prototype' view\n                </li>\n                <li>\n                    Select the 'Survey Element' checkbox.\n                </li>\n              </ol>\n          ",image:{src:"/help/SurveyCanvas.png",caption:"The survey checkbox is in the Prototype view"}},{id:"survey.tasks",title:"Tasks",body:'\n               You can also show for each user the successful task. Simply select "Show Tasks" in the "Options" menu.\n\n               <br>\n               By comparing the user feedback and the task success, it becomes easy to varify if there is a correlation between the \n               objective performance of a tester and the implicit, personal perception of the app. \n               If there is a mismatch, it might make sense to check the screen recording for further details.\n  \n            ',image:{src:"/help/SurveyTask.png",caption:"The survey section showing the successfull tasks."}}]}]},17175:function(e,t,n){n.r(t),n.d(t,{texts:function(){return s}});let s=[{id:"testing",name:"User Testing",title:"User Testing",css:"MatcHelpTopicSpacer",body:"\n          To create a good user interface, you need to test it with real users. It is best to validate your assumptions \n          right after the first iteration. The more and the earlier you test, the better. Every user that tests your UI,\n          will give you valuable feedback.\n      ",paragraphs:[{id:"testing.share",title:"Sharing Link",body:"\n                  To start testing, you need to create a shareable link. Simply navigate to the prototype,\n                  and click on the 'Share' button. A dialog will appear. Copy the first link and share it with your\n                  testers. When they open the link, the prototype will be launched and they can try it out.\n              "},{id:"testing.landing",title:"Test Settings",body:'\n                When the users load the shared link, they will come to a landing page. On this page, they will\n                see a welcome message with an explanation as well as a list of tasks. You can customize the following settings:\n\n                <ol>\n                    <li>\n                        <b>Welcome Message</b>: You can customize the welcome message that will be shown to the users. Make sure \n                        the welcome message encourages them to start the test, but also explains what is the purpose of the test,\n                        and what is expected from them.\n                    </li>\n                    <li>\n                        <b>Splash Image</b>: You can upload a custom background image for the landing page. This allows you to keep\n                        the test experience close to your brand.\n                    </li>\n                    <li>\n                        <b>Single Test per user</b>: Sometimes users open the prototype several times, which can mess up the \n                        collected data. You can avoid the this, by enabling the checkbox "Record data only for the \n                        first time a user tests the prototype." If checked, only the first test session is recorded.\n                    </li>\n                </ol>\n            '},{id:"testing.tasks",title:"Creating Tasks",css:"",body:"\n                Often you want your users to fulfil one or more tasks. You can tell your users about the tasks,\n                by creating a Task. A task has a name and description, that will be shown to the users before the\n                prototype is launched. In addition, you can also specify the number of steps that make up the test, for example,\n                the users should click on the 'Start' button, and navigate to the 'SignUp' screen. To create a task,\n                follow these steps:\n\n                <ol>\n                    <li>\n                        Create a prototype\n                    </li>\n                    <li>\n                        Navigate to the 'Test' tab\n                    </li>\n                    <li>\n                        Click 'Add Task'. A dialog will show up.\n                    </li>\n                    <li>\n                        Enter a name and description, that will be shown to the users.\n                    </li>\n                    <li>\n                        If you want to create steps, use the prototype on the right side. Simply perform the\n                        task that the users should do. The relevant steps will be shown on the lower left side.\n                        You can remove not needed steps, by clicking on them.\n                    </li>\n                    <li>\n                        By default, only the screen loads will be considered for steps. If you want to define\n                        a fine grained task, unselect the 'Record only screen views' checkbox.\n                    </li>\n                    <li>\n                        Click on 'Save'\n                    </li>\n                </ol>\n\n            "},{id:"testing.howmany",title:"How Many Users",body:"\n              To gather statistically relevant results, one requires at least 30 users. However, often it is difficult\n              to get access to a large number of users. Therefore the literature suggests to test with at least 5 different users.\n            "}]}]}}]);
//# sourceMappingURL=help.69309e49.js.map